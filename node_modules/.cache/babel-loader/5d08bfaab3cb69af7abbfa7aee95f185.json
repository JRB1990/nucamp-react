{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const fetchCampsites = () => dispatch => {\n  dispatch(campsitesLoading());\n  return fetch(baseUrl + 'campsites').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(campsites => dispatch(addCampsites(campsites))).catch(error => dispatch(campsitesFailed(error.message)));\n};\nexport const campsitesLoading = () => ({\n  type: ActionTypes.CAMPSITES_LOADING\n});\nexport const campsitesFailed = errMess => ({\n  type: ActionTypes.CAMPSITES_FAILED,\n  payLoad: errMess\n});\nexport const addCampsites = campsites => ({\n  type: ActionTypes.ADD_CAMPSITES,\n  payload: campsites\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errMess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errMess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (campsiteId, rating, author, text) => dispatch => {\n  const newComment = {\n    campsiteId,\n    rating,\n    author,\n    text\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comment', error.message);\n    alert('Your comment could not be posted/nError: ' + error.message);\n  });\n};\nexport const fetchPromotions = () => dispatch => {\n  dispatch(promotionsLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(promotions => dispatch(addPromotions(promotions))).catch(error => dispatch(promotionsFailed(error.message)));\n};\nexport const promotionsLoading = () => ({\n  type: ActionTypes.PROMOTIONS_LOADING\n});\nexport const promotionsFailed = errMess => ({\n  type: ActionTypes.PROMOTIONS_FAILED,\n  payLoad: errMess\n});\nexport const addPromotions = promotions => ({\n  type: ActionTypes.ADD_PROMOTIONS,\n  payload: promotions\n});\nexport const fetchPartners = () => dispatch => {\n  dispatch(partnersLoading());\n  return fetch(baseUrl + 'partners').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(partners => dispatch(addPartners(partners))).catch(error => dispatch(partnersFailed(error.message)));\n};\nexport const partnersLoading = () => ({\n  type: ActionTypes.PARTNERS_LOADING\n});\nexport const partnersFailed = errMess => ({\n  type: ActionTypes.PARTNERS_FAILED,\n  payLoad: errMess\n});\nexport const addPartners = partners => ({\n  type: ActionTypes.ADD_PARTNERS,\n  payload: partners\n});\nexport const postFeedback = feedback => () => {\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(feedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => {\n    console.log(`Feedback: `);\n  }).catch(error => {\n    console.log('post comment', error.message);\n    alert('Your comment could not be posted/nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["C:/Users/krist/Desktop/Josh/Learning/Nucamp/NucampFolder/3-React/nucampsite/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchCampsites","dispatch","campsitesLoading","fetch","then","response","ok","error","Error","status","statusText","errMess","message","json","campsites","addCampsites","catch","campsitesFailed","type","CAMPSITES_LOADING","CAMPSITES_FAILED","payLoad","ADD_CAMPSITES","payload","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","addComment","comment","ADD_COMMENT","postComment","campsiteId","rating","author","text","newComment","date","Date","toISOString","method","body","JSON","stringify","headers","console","log","alert","fetchPromotions","promotionsLoading","promotions","addPromotions","promotionsFailed","PROMOTIONS_LOADING","PROMOTIONS_FAILED","ADD_PROMOTIONS","fetchPartners","partnersLoading","partners","addPartners","partnersFailed","PARTNERS_LOADING","PARTNERS_FAILED","ADD_PARTNERS","postFeedback","feedback"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const fetchCampsites = () => dispatch => {\r\n    dispatch(campsitesLoading());\r\n\r\n    return fetch(baseUrl + 'campsites')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                const errMess = new Error(error.message);\r\n                throw errMess;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(campsites => dispatch(addCampsites(campsites)))\r\n        .catch(error => dispatch(campsitesFailed(error.message)));\r\n};\r\n\r\nexport const campsitesLoading = () => ({\r\n    type: ActionTypes.CAMPSITES_LOADING\r\n});\r\n\r\nexport const campsitesFailed = errMess => ({\r\n    type: ActionTypes.CAMPSITES_FAILED,\r\n    payLoad: errMess,\r\n});\r\n\r\nexport const addCampsites = campsites => ({\r\n    type: ActionTypes.ADD_CAMPSITES,\r\n    payload: campsites,\r\n});\r\n\r\nexport const fetchComments = () => dispatch => {\r\n    return fetch(baseUrl + 'comments')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                const errMess = new Error(error.message);\r\n                throw errMess;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(addComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = errMess => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errMess,\r\n});\r\n\r\nexport const addComments = comments => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments,\r\n});\r\n\r\nexport const addComment = comment => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment,\r\n});\r\n\r\nexport const postComment = (campsiteId, rating, author, text) => dispatch => {\r\n    const newComment = {\r\n        campsiteId,\r\n        rating,\r\n        author,\r\n        text,\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => { throw error; }\r\n        )\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch (error => {\r\n            console.log('post comment', error.message);\r\n            alert('Your comment could not be posted/nError: ' + error.message);\r\n        });\r\n};\r\n\r\nexport const fetchPromotions = () => dispatch => {\r\n    dispatch(promotionsLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                const errMess = new Error(error.message);\r\n                throw errMess;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(promotions => dispatch(addPromotions(promotions)))\r\n        .catch(error => dispatch(promotionsFailed(error.message)))\r\n};\r\n\r\nexport const promotionsLoading = () => ({\r\n    type: ActionTypes.PROMOTIONS_LOADING\r\n});\r\n\r\nexport const promotionsFailed = errMess => ({\r\n    type: ActionTypes.PROMOTIONS_FAILED,\r\n    payLoad: errMess,\r\n});\r\n\r\nexport const addPromotions = promotions => ({\r\n    type: ActionTypes.ADD_PROMOTIONS,\r\n    payload: promotions,\r\n});\r\n\r\nexport const fetchPartners = () => dispatch => {\r\n    dispatch(partnersLoading());\r\n\r\n    return fetch(baseUrl + 'partners')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                const errMess = new Error(error.message);\r\n                throw errMess;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(partners => dispatch(addPartners(partners)))\r\n        .catch(error => dispatch(partnersFailed(error.message)))\r\n};\r\n\r\nexport const partnersLoading = () => ({\r\n    type: ActionTypes.PARTNERS_LOADING\r\n});\r\n\r\nexport const partnersFailed = errMess => ({\r\n    type: ActionTypes.PARTNERS_FAILED,\r\n    payLoad: errMess,\r\n});\r\n\r\nexport const addPartners = partners => ({\r\n    type: ActionTypes.ADD_PARTNERS,\r\n    payload: partners,\r\n});\r\n\r\nexport const postFeedback = (feedback) => () => {\r\n\r\n    return fetch(baseUrl + 'feedback', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(feedback),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                const error = new Error(`Error ${response.status}: ${response.statusText}`);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => { throw error; }\r\n        )\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(`Feedback: `, );\r\n        })\r\n        .catch (error => {\r\n            console.log('post comment', error.message);\r\n            alert('Your comment could not be posted/nError: ' + error.message);\r\n        });\r\n};"]},"metadata":{},"sourceType":"module"}